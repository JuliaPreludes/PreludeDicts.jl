var documenterSearchIndex = {"docs":
[{"location":"#PreludeDicts.jl","page":"PreludeDicts.jl","title":"PreludeDicts.jl","text":"","category":"section"},{"location":"","page":"PreludeDicts.jl","title":"PreludeDicts.jl","text":"using DocumentationOverview\nusing PreludeDicts\nDocumentationOverview.table_md(\n    PreludeDicts;\n    include = api -> api.hasdoc && !(api.value isa Module),\n)","category":"page"},{"location":"","page":"PreludeDicts.jl","title":"PreludeDicts.jl","text":"PreludeDicts.modify!\nPreludeDicts.Delete\nPreludeDicts.Keep\nPreludeDicts.tryset!\nPreludeDicts.trysetwith!\nPreludeDicts.tryget\nPreludeDicts.tryinsert!","category":"page"},{"location":"#PreludeDicts.modify!","page":"PreludeDicts.jl","title":"PreludeDicts.modify!","text":"modify!(f, dict, key) -> y\n\nModify the slot of dict for key using f that maps nothing or key′ => value to nothing, Some(value), Keep(_), or Delete(_).\n\nf takes two types of argument:\n\nnothing: indicates that the slot associated with key is unoccupied.\nkey′ => value (or a similar pair-like value): indicates that the slot associated with key stores key′ => value.\n\nf can return the following values:\n\nnothing or Delete(x): indicates that the value associated with key should be deleted. Delete is useful for returning a value computed in f.\nSome(value): sets the new value for the slot associated with key.\nKeep(x): indicates that the slot related to key should not be modified. It is useful for returning a value computed in f.\n\nExtended help\n\nExamples\n\njulia> using PreludeDicts\n\njulia> inc!(dict, key) = modify!(dict, key) do slot\n           if slot === nothing\n               Some(1)\n           else\n               Some(last(slot) + 1)\n           end\n       end;\n\njulia> dict = Dict(:a => 111);\n\njulia> inc!(dict, :a)\nSome(112)\n\njulia> inc!(dict, :b)\nSome(1)\n\njulia> dict == Dict(:a => 112, :b => 1)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#PreludeDicts.Delete","page":"PreludeDicts.jl","title":"PreludeDicts.Delete","text":"Delete(data)\n\nA value that can be returned from the function passed to modify! to indicate that the slot has to be deleted while.\n\n\n\n\n\n","category":"type"},{"location":"#PreludeDicts.Keep","page":"PreludeDicts.jl","title":"PreludeDicts.Keep","text":"Keep(data)\n\nA value that can be returned from the function passed to modify! to indicate that the slot should not be modified.\n\n\n\n\n\n","category":"type"},{"location":"#PreludeDicts.tryset!","page":"PreludeDicts.jl","title":"PreludeDicts.tryset!","text":"tryset!(dict, key, value) -> Ok(key′ => value′) or Err(key′ => dict[key′])\n\nSet dict[key] = value if dict[key] does not exist and return Ok(key′ => value′) where the key′ => value′ is the key-value pair just inserted at dict[key]. Return Err(key′ => dict[key]) if dict[key] exists.\n\nvalue === value′ and/or key === key′ may not hold if value isa valtype(dict) does not hold.\n\nExtended help\n\nExamples\n\njulia> using PreludeDicts\n\njulia> dict = Dict(:a => 111);\n\njulia> tryset!(dict, :a, 222)\nTry.Err: :a => 111\n\njulia> tryset!(dict, :b, 222)\nTry.Ok: :b => 222\n\njulia> dict == Dict(:a => 111, :b => 222)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#PreludeDicts.trysetwith!","page":"PreludeDicts.jl","title":"PreludeDicts.trysetwith!","text":"trysetwith!(factory, dict, key) -> Ok(key′ => value′) or Err(key′ => dict[key′])\n\nSet dict[key] = factory() if dict[key] does not exist and return Ok(key′ => value′) where the key′ => value′ is the key-value pair just inserted at dict[key]. Return Err(key′ => dict[key]) if dict[key] exists.\n\nExtended help\n\nExamples\n\njulia> using PreludeDicts\n\njulia> dict = Dict(:a => 111);\n\njulia> trysetwith!(Returns(222), dict, :a)\nTry.Err: :a => 111\n\njulia> trysetwith!(Returns(222), dict, :b)\nTry.Ok: :b => 222\n\njulia> dict == Dict(:a => 111, :b => 222)\ntrue\n\n\n\n\n\n","category":"function"},{"location":"#PreludeDicts.tryget","page":"PreludeDicts.jl","title":"PreludeDicts.tryget","text":"tryget(dict, key) -> Ok(value) or Err(TypedKeyError(key))\n\nLook up the key and return the value wrapped in an Ok if found.  Return Err(TypedKeyError(key)) otherwise.\n\nExtended help\n\nExamples\n\njulia> using PreludeDicts\n\njulia> dict = Dict(:a => 111);\n\njulia> tryget(dict, :a)\nTry.Ok: 111\n\njulia> tryget(dict, :b)\nTry.Err: TypedKeyError: key :b not found\n\n\n\n\n\n","category":"function"},{"location":"#PreludeDicts.tryinsert!","page":"PreludeDicts.jl","title":"PreludeDicts.tryinsert!","text":"tryinsert!(set, x) -> Ok(x′) or Err(x′′)\n\nInsert x if it does not exist in set and return Ok(x′) where x′ is the value just inserted to set. Otherwise, return Err(x′′) where x′′ is the value exists in set that is equivalent to x.\n\nx === x′ or x === x′′ may not hold if x isa eltype(set) does not hold.\n\nExtended help\n\nExamples\n\njulia> using PreludeDicts\n\njulia> set = Set([111]);\n\njulia> tryinsert!(set, 111)\nTry.Err: 111\n\njulia> tryinsert!(set, 222)\nTry.Ok: 222\n\njulia> set == Set([111, 222])\ntrue\n\n\n\n\n\n","category":"function"}]
}
